"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const FP = require("lodash/fp");
const loon_1 = require("loon");
class DataMapExecutor {
    constructor() {
        this.cacheStore = new Map();
        this.converter = loon_1.DependencyRegistry.get(loon_1.ConverterService);
    }
    exec(data, map, isCollection) {
        if (_.isUndefined(data) || _.isNull(data)) {
            return data;
        }
        if (_.isUndefined(map) || _.isNull(map)) {
            return data;
        }
        if (map && _.isUndefined(map.type)) {
            return data;
        }
        if (!_.isArray(data)) {
            data = [data];
        }
        const result = data.map(dataItem => {
            const mainIns = this.getIns(map, dataItem);
            if (map.associations) {
                map.associations.map(map => {
                    const ins = this.exec(dataItem, map, false);
                    const uniqueColumn = map.uniqueKey ? map.uniqueKey : 'id';
                    if (ins && typeof ins[uniqueColumn] !== 'undefined' && ins[uniqueColumn] !== null) {
                        mainIns[map.property] = ins;
                    }
                });
            }
            if (map.collections) {
                map.collections.map(map => {
                    const ins = this.exec(dataItem, map, false);
                    const uniqueColumn = map.uniqueKey ? map.uniqueKey : 'id';
                    if (ins && typeof ins[uniqueColumn] !== 'undefined' && ins[uniqueColumn] !== null) {
                        if (mainIns[map.property]) {
                            if (mainIns[map.property].map(_ => _[uniqueColumn]).indexOf(ins[uniqueColumn]) === -1) {
                                mainIns[map.property].push(ins);
                            }
                        }
                        else {
                            mainIns[map.property] = [ins];
                        }
                    }
                });
            }
            return this.getCacheKey(map, dataItem);
        });
        const insList = FP.flow(FP.uniq, FP.map(cacheKey => this.cacheStore.get(cacheKey)), FP.compact)(result);
        if (isCollection) {
            return insList;
        }
        else {
            return insList[0];
        }
    }
    getIns(map, data) {
        const cacheKey = this.getCacheKey(map, data);
        let ins = this.cacheStore.get(cacheKey);
        if (typeof ins === 'undefined') {
            ins = this.converter.convert(data, map.type, { prefix: map.prefix });
            this.cacheStore.set(cacheKey, ins);
        }
        return ins;
    }
    getCacheKey(map, data) {
        const uniqueColumn = map.uniqueKey ? map.uniqueKey : 'id';
        const idColumn = map.prefix ? `${map.prefix}${uniqueColumn}` : uniqueColumn;
        return `${idColumn}-${data[idColumn]}`;
    }
}
exports.DataMapExecutor = DataMapExecutor;
//# sourceMappingURL=DataMapExecutor.js.map