"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DataMapMetadata_1 = require("./metadata/DataMapMetadata");
const _ = require("lodash");
const AssociationMapMetadata_1 = require("./metadata/AssociationMapMetadata");
const ResultMapMetadata_1 = require("./metadata/ResultMapMetadata");
const CollectionMapMetadata_1 = require("./metadata/CollectionMapMetadata");
/**
 * Use DataMapParser to parse DataMap
 */
class DataMapParser {
    constructor(map) {
        this._map = map;
        this.parse(this._map, true);
    }
    parse(map, root) {
        const metadata = new DataMapMetadata_1.DataMapMetadata();
        if (root && _.isEmpty(map.type)) {
            throw new Error('must specify a type for root DataMap');
        }
        metadata.type = map.type;
        if (map.results) {
            metadata.results = this.parseResultsMap(map.results);
        }
        if (map.associations) {
            metadata.associations = this.parseAssociationMap(map.associations);
        }
        if (map.collections) {
            metadata.collections = this.parseCollectionMap(map.collections);
        }
        return metadata;
    }
    parseResultsMap(results) {
        const map = new Map();
        results.forEach(result => {
            const metadata = new ResultMapMetadata_1.ResultMapMetadata();
            metadata.property = result.property;
            if (!_.isUndefined(result.column)) {
                metadata.column = result.column;
            }
            if (!_.isUndefined(result.typeHandler)) {
                metadata.typeHandler = result.typeHandler;
            }
            map.set(result.property, metadata);
        });
        return map;
    }
    parseAssociationMap(associations) {
        const map = new Map();
        associations.forEach((association) => {
            const metadata = new AssociationMapMetadata_1.AssociationMapMetadata();
            map.set(association.property, metadata);
        });
        return map;
    }
    parseCollectionMap(collections) {
        const map = new Map();
        collections.forEach(collection => {
            const metadata = new CollectionMapMetadata_1.CollectionMapMetadata();
            map.set(collection.property, metadata);
        });
        return map;
    }
}
exports.DataMapParser = DataMapParser;
//# sourceMappingURL=DataMapParser.js.map