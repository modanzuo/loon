"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MiddlewareMetadata_1 = require("./MiddlewareMetadata");
const DependencyRegistry_1 = require("../di/DependencyRegistry");
const HandlerRegistry_1 = require("./HandlerRegistry");
class MiddlewareRegistry {
    static registerMiddleware(type, isErrorMiddleware, options) {
        DependencyRegistry_1.DependencyRegistry.registerComponent(type);
        const middlewareMetadata = this.getMiddleware(type);
        middlewareMetadata.init(options);
        middlewareMetadata.isErrorMiddleware = isErrorMiddleware;
        const handlerMetadata = HandlerRegistry_1.HandlerRegistry.getHandler(type, 'use');
        middlewareMetadata.handler = handlerMetadata;
    }
    static getMiddlewares(options) {
        const middlewares = [];
        this._middlewares.forEach(middlewareMetadata => {
            if (middlewareMetadata.isErrorMiddleware === options.isErrorMiddleware) {
                middlewares.push(middlewareMetadata);
            }
        });
        return this.sortMiddlewares(middlewares);
    }
    static sortMiddlewares(middlewares) {
        return middlewares.sort((m1, m2) => m1.order - m2.order);
    }
    /**
     * safe get middleware
     *
     * @param type
     * @returns {MiddlewareMetadata}
     */
    static getMiddleware(type) {
        let middlewareMetadata = this._middlewares.get(type);
        if (middlewareMetadata) {
            return middlewareMetadata;
        }
        else {
            middlewareMetadata = new MiddlewareMetadata_1.MiddlewareMetadata(type);
            this._middlewares.set(type, middlewareMetadata);
            return middlewareMetadata;
        }
    }
}
MiddlewareRegistry._middlewares = new Map();
MiddlewareRegistry.middlewares = MiddlewareRegistry._middlewares;
exports.MiddlewareRegistry = MiddlewareRegistry;
//# sourceMappingURL=MiddlewareRegistry.js.map