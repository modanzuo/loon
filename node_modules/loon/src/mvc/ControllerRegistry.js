"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ControllerMetadata_1 = require("./ControllerMetadata");
const DependencyRegistry_1 = require("../di/DependencyRegistry");
const ControllerTransformer_1 = require("./ControllerTransformer");
const HandlerRegistry_1 = require("./HandlerRegistry");
const BeforeAfterFilterType_1 = require("./enum/BeforeAfterFilterType");
const FilterRegistry_1 = require("./FilterRegistry");
const ControllerFilterMetadata_1 = require("./ControllerFilterMetadata");
class ControllerRegistry {
    static getRoutes(type) {
        const result = new Map();
        if (type) {
            const controllerMetadata = ControllerRegistry._controllers.get(type);
            if (controllerMetadata) {
                const transformer = new ControllerTransformer_1.ControllerTransformer(controllerMetadata);
                const router = transformer.transform();
                result.set(controllerMetadata.baseUrl, router);
            }
        }
        else {
            ControllerRegistry.controllers.forEach(controllerMetadata => {
                const transformer = new ControllerTransformer_1.ControllerTransformer(controllerMetadata);
                const router = transformer.transform();
                result.set(controllerMetadata.baseUrl, router);
            });
        }
        return result;
    }
    /**
     * used to register a class as a Controller or RestController
     *
     * for example:
     *
     *   @RestController("/api/v1/")
     *   class ATestController {
     *   }
     *
     *   @Controller()
     *   class BTestController {
     *   }
     *
     *   type
     *      is the controller class, in this example: ATestController or BTestController
     *
     *   baseUrl
     *      is the controller base url, in this example: "/api/v1/"
     *      if don't provide baseUrl in the decorator, then it would be blank string: ""
     *
     *   isRest
     *      is the flag indicate whether is a RestController or not
     *      RestController default render the result as JSON
     *      Controller default render the data into the template
     *
     * @param type
     * @param baseUrl
     * @param isRest
     */
    static registerController(type, baseUrl, isRest) {
        DependencyRegistry_1.DependencyRegistry.registerComponent(type);
        const controllerMetadata = this.getController(type);
        controllerMetadata.baseUrl = baseUrl;
        controllerMetadata.isRest = isRest;
    }
    /**
     * used to register a controller action, an action used to handle http request
     *
     * for example
     *
     *   @RestController()
     *   class ATestController {
     *
     *      @Get("/")
     *      public indexAction(request: Express.Request) {
     *          return "Hello world";
     *      }
     *   }
     *
     *   type
     *      is the controller class, in this example: ATestController
     *
     *   actionName
     *      is the action name, in this example: "indexAction"
     *
     *   httpMethod
     *      is the http request method for the action to handle, in this example: "get",
     *      all the supported http methods
     *      TODO: support all the express methods
     *      please refer to https://expressjs.com/en/4x/api.html#app.METHOD
     *
     *   path
     *      is the http request path for the action to handle, in this example: "/"
     *
     * @param type
     * @param actionName
     * @param httpMethod
     * @param path
     */
    static registerAction(type, actionName, httpMethod, path) {
        const controllerMetadata = this.getController(type);
        const handlerMetadata = HandlerRegistry_1.HandlerRegistry.getHandler(type, actionName);
        handlerMetadata.httpMethodAndPaths.push({
            method: httpMethod,
            path
        });
        controllerMetadata.handlers.set(actionName, handlerMetadata);
    }
    static registerFilter(controllerType, filterType, beforeOrAfterFilter, options) {
        const controllerMetadata = this.getController(controllerType);
        const filterMetadata = FilterRegistry_1.FilterRegistry.getFilter(filterType);
        const controllerFilterMetadata = new ControllerFilterMetadata_1.ControllerFilterMetadata(filterMetadata, options);
        switch (beforeOrAfterFilter) {
            case BeforeAfterFilterType_1.BeforeAfterFilterType.BeforeFilter:
                controllerMetadata.beforeFilters.push(controllerFilterMetadata);
                return;
            case BeforeAfterFilterType_1.BeforeAfterFilterType.AfterFilter:
                controllerMetadata.afterFilters.push(controllerFilterMetadata);
                return;
            default:
                throw new Error("not valid arguments");
        }
    }
    /**
     * safe get controller
     *
     * @param type
     * @returns {ControllerMetadata}
     */
    static getController(type) {
        let controllerMetadata = this._controllers.get(type);
        if (typeof controllerMetadata === 'undefined') {
            controllerMetadata = new ControllerMetadata_1.ControllerMetadata(type);
            this._controllers.set(type, controllerMetadata);
        }
        return controllerMetadata;
    }
}
ControllerRegistry._controllers = new Map();
ControllerRegistry.controllers = ControllerRegistry._controllers;
exports.ControllerRegistry = ControllerRegistry;
//# sourceMappingURL=ControllerRegistry.js.map