"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PropertyMetadata_1 = require("./PropertyMetadata");
const Reflection_1 = require("../core/Reflection");
const _ = require("lodash");
const DependencyRegistry_1 = require("../di/DependencyRegistry");
class PropertyRegistry {
    static registerObjectProperty(type, klassProperty, nameOrOptions) {
        const properties = this.findProperties(type);
        const propertyType = Reflection_1.Reflection.getType(type.prototype, klassProperty);
        let objectProperty = klassProperty;
        let converter;
        let baseType;
        let serialize = true;
        let deserialize = true;
        if (typeof nameOrOptions !== 'undefined') {
            if (_.isString(nameOrOptions)) {
                objectProperty = nameOrOptions;
            }
            else {
                const options = nameOrOptions;
                if (typeof options.name !== 'undefined') {
                    objectProperty = options.name;
                }
                if (typeof options.converter !== 'undefined') {
                    converter = DependencyRegistry_1.DependencyRegistry.get(options.converter);
                }
                if (typeof options.baseType !== 'undefined') {
                    baseType = options.baseType;
                }
                if (typeof options.serialize !== 'undefined') {
                    serialize = options.serialize;
                }
                if (typeof options.deserialize !== 'undefined') {
                    deserialize = options.deserialize;
                }
            }
        }
        const propertyMetadata = new PropertyMetadata_1.PropertyMetadata(type, klassProperty, objectProperty, propertyType, serialize, deserialize);
        if (converter) {
            propertyMetadata.converter = converter;
        }
        if (baseType) {
            propertyMetadata.baseType = baseType;
        }
        properties.push(propertyMetadata);
    }
    static registerInherited(type, inherited) {
        const inheritedProperties = this.findProperties(inherited);
        const properties = this.findProperties(type);
        inheritedProperties.forEach((property) => {
            const foundProperty = properties.find(item => item.klassProperty === property.klassProperty);
            if (typeof foundProperty === 'undefined') {
                properties.push(property);
            }
        });
    }
    static findProperties(type) {
        let properties = this.properties.get(type);
        if (typeof properties === 'undefined') {
            properties = [];
            this.properties.set(type, properties);
        }
        return properties;
    }
}
PropertyRegistry.properties = new Map();
exports.PropertyRegistry = PropertyRegistry;
//# sourceMappingURL=PropertyRegistry.js.map