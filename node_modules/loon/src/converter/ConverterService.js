"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Service_1 = require("../mvc/decorator/Service");
const PropertyRegistry_1 = require("./PropertyRegistry");
const _ = require("lodash");
const TypeUtil_1 = require("../util/TypeUtil");
/**
 * ConverterService used to convert class to object and vice-versa.
 */
let ConverterService = class ConverterService {
    convert(data, returnType, options) {
        if (_.isUndefined(data) || _.isNull(data)) {
            return data;
        }
        const type = data.constructor;
        let properties;
        if (returnType === type) {
            if (typeof options === 'undefined' || typeof options.baseType === 'undefined') {
                return data;
            }
        }
        if (returnType === String) {
            return "" + data;
        }
        if (returnType === Number) {
            return +data;
        }
        if (returnType === Boolean) {
            if (data === 'true')
                return true;
            if (data === 'false')
                return false;
            return !!data;
        }
        if (returnType === Date) {
            return new Date(data);
        }
        if (returnType === Array && type === Array && options && options.baseType) {
            return data.map(item => this.convert(item, options.baseType));
        }
        if (returnType === Map && type === Map && options && options.baseType) {
            const result = new Map();
            data.forEach((value, key) => {
                result.set(key, this.convert(value, options.baseType));
            });
            return result;
        }
        /**
         *
         * Convert class instance to object
         * If provide a converter, and implement serialize function
         * it will use serialize function result as the property value
         *
         */
        properties = PropertyRegistry_1.PropertyRegistry.properties.get(type);
        if (returnType === Object && !TypeUtil_1.TypeUtil.isSimpleType(type) && properties) {
            const result = {};
            properties.forEach((metadata) => {
                if (metadata.serialize === false)
                    return;
                let objectProperty = metadata.objectProperty;
                if (options && options.prefix) {
                    objectProperty = options.prefix + objectProperty;
                }
                let value;
                if (metadata.converter && metadata.converter.serialize) {
                    value = metadata.converter.serialize(data, metadata.klassProperty, metadata.objectProperty);
                }
                else if (metadata.propertyType === Array || metadata.propertyType === Map) {
                    value = data[metadata.klassProperty];
                    if (TypeUtil_1.TypeUtil.isSimpleType(metadata.baseType)) {
                        value = this.convert(value, metadata.propertyType, { baseType: metadata.baseType });
                    }
                    else {
                        value = this.convert(value, metadata.propertyType, { baseType: Object });
                    }
                }
                else {
                    value = data[metadata.klassProperty];
                    if (TypeUtil_1.TypeUtil.isSimpleType(metadata.propertyType)) {
                        value = this.convert(value, metadata.propertyType);
                    }
                    else {
                        value = this.convert(value, Object);
                    }
                }
                result[objectProperty] = value;
            });
            return result;
        }
        /**
         *
         * Convert object to class instance
         * If provide a converter, and implement deserialize function
         * it will use deserialize function result as the property value
         *
         */
        properties = PropertyRegistry_1.PropertyRegistry.properties.get(returnType);
        if (type === Object && !TypeUtil_1.TypeUtil.isSimpleType(returnType) && properties) {
            const klass = returnType;
            const ins = new klass();
            properties.forEach((metadata) => {
                if (metadata.deserialize === false)
                    return;
                let objectProperty = metadata.objectProperty;
                if (options && options.prefix) {
                    objectProperty = options.prefix + objectProperty;
                }
                let value;
                if (metadata.converter && metadata.converter.deserialize) {
                    value = metadata.converter.deserialize(data, metadata.klassProperty, objectProperty);
                }
                else {
                    value = data[objectProperty];
                    value = this.convert(value, metadata.propertyType, { baseType: metadata.baseType });
                }
                ins[metadata.klassProperty] = value;
            });
            return ins;
        }
        /**
         *
         * Convert a class instance to another class instance
         * based on the class property name, convert, ignore converter and serialize and deserialize options
         *
         */
        const returnProperties = PropertyRegistry_1.PropertyRegistry.properties.get(returnType);
        properties = PropertyRegistry_1.PropertyRegistry.properties.get(type);
        if (!TypeUtil_1.TypeUtil.isSimpleType(type) && !TypeUtil_1.TypeUtil.isSimpleType(returnType) && properties && returnProperties) {
            const klass = returnType;
            const ins = new klass();
            returnProperties.forEach((metadata) => {
                const value = this.convert(data[metadata.klassProperty], metadata.propertyType, { baseType: metadata.baseType });
                ins[metadata.klassProperty] = value;
            });
            return ins;
        }
        throw new Error(`not support convert data`);
    }
};
ConverterService = __decorate([
    Service_1.Service()
], ConverterService);
exports.ConverterService = ConverterService;
//# sourceMappingURL=ConverterService.js.map