"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DIException_1 = require("./error/DIException");
const Component_1 = require("../core/Component");
const Reflection_1 = require("../core/Reflection");
class DependencyRegistry {
    static set(klass, instance) {
        this.instances.set(klass, instance);
    }
    static delete(klass) {
        this.instances.delete(klass);
    }
    static has(klass) {
        return !!this.instances.get(klass);
    }
    static get(klass) {
        let instance = this.instances.get(klass);
        let params;
        if (instance) {
            return instance;
        }
        const component = this.components.get(klass);
        if (!component) {
            throw new DIException_1.DIException(`[TYPED] can not find component: ${klass.name}`);
        }
        if (component.params && component.params.length > 0) {
            params = component.params.map((param, index) => {
                const handler = component.paramHandlers.get(index);
                if (handler) {
                    return handler();
                }
                return DependencyRegistry.get(param);
            });
            params.unshift(null);
        }
        component.propertyHandlers.forEach((handler, key) => {
            Object.defineProperty(klass.prototype, key, {
                configurable: true,
                enumerable: true,
                writable: true,
                value: handler()
            });
        });
        instance = new (klass.bind.apply(klass, params))();
        DependencyRegistry.set(klass, instance);
        return instance;
    }
    static registerComponent(klass) {
        let component = this.components.get(klass);
        if (typeof component === 'undefined') {
            component = new Component_1.Component(klass);
        }
        const params = Reflection_1.Reflection.getParams(klass);
        component.params = params;
        this.components.set(klass, component);
    }
    static registerHandler(target, key, index) {
        const klass = target.constructor;
        let component = this.components.get(klass);
        if (typeof component === 'undefined') {
            component = new Component_1.Component(klass);
            this.components.set(klass, component);
        }
        if (typeof index !== 'undefined') {
            const params = Reflection_1.Reflection.getParams(target, key);
            const paramKlass = params[index];
            component.paramHandlers.set(index, () => DependencyRegistry.get(paramKlass));
        }
        else {
            const klass = Reflection_1.Reflection.getType(target, key);
            component.propertyHandlers.set(key, () => DependencyRegistry.get(klass));
        }
    }
    static unregisterComponent(klass) {
        this.components.delete(klass);
    }
}
DependencyRegistry.components = new Map();
DependencyRegistry.instances = new Map();
exports.DependencyRegistry = DependencyRegistry;
//# sourceMappingURL=DependencyRegistry.js.map