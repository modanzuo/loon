"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Winston = require("winston");
const Path = require("path");
const ConfigContainer_1 = require("../config/ConfigContainer");
/**
 *
 * LogFactory for init and get logger
 *
 * logger is actually a Winston Logger instance https://github.com/winstonjs/winston/blob/master/README.md
 * use {LogConfigLoader} to transform config file to winston transport
 *
 */
class LogFactory {
    static init(configDir, logDir, env) {
        const loggerConfig = Path.join(configDir, 'logger.json');
        ConfigContainer_1.ConfigContainer.registerConfig(loggerConfig);
        if (ConfigContainer_1.ConfigContainer.get(`logger.${env}`)) {
            const envLoggerConfig = ConfigContainer_1.ConfigContainer.get(`logger.${env}`);
            const transports = [];
            Object.keys(envLoggerConfig.transports).forEach(key => {
                if (Winston.transports.hasOwnProperty(key)) {
                    const transportConfig = Object.assign({}, envLoggerConfig.transports[key], { dirname: logDir });
                    const transportInstance = new (Winston.transports[key])(transportConfig);
                    transports.push(transportInstance);
                }
            });
            this.logger = new (Winston.Logger)({
                level: envLoggerConfig.level,
                transports
            });
        }
    }
    static getLogger() {
        return this.logger;
    }
}
exports.LogFactory = LogFactory;
//# sourceMappingURL=LogFactory.js.map