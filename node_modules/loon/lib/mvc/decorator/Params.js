"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ParamType_1 = require("../enum/ParamType");
const HandlerRegistry_1 = require("../HandlerRegistry");
function PathParam(expression, options) {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Path, actionName, index, expression, options);
    };
}
exports.PathParam = PathParam;
function QueryParam(expression, options) {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Query, actionName, index, expression, options);
    };
}
exports.QueryParam = QueryParam;
function BodyParam(expression, options) {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Body, actionName, index, expression, options);
    };
}
exports.BodyParam = BodyParam;
function HeaderParam(expression, options) {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Header, actionName, index, expression, options);
    };
}
exports.HeaderParam = HeaderParam;
function CookieParam(expression, options) {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Cookie, actionName, index, expression, options);
    };
}
exports.CookieParam = CookieParam;
function SessionParam(expression, options) {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Session, actionName, index, expression, options);
    };
}
exports.SessionParam = SessionParam;
function Req() {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Request, actionName, index, "");
    };
}
exports.Req = Req;
function Res() {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Response, actionName, index, "");
    };
}
exports.Res = Res;
function Next() {
    return (target, actionName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Next, actionName, index, "");
    };
}
exports.Next = Next;
function Err() {
    return (target, methodName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Error, methodName, index, "");
    };
}
exports.Err = Err;
function Data() {
    return (target, methodName, index) => {
        registerHelper(target.constructor, ParamType_1.ParamType.Data, methodName, index, "");
    };
}
exports.Data = Data;
function registerHelper(type, paramType, actionName, index, expression, options) {
    HandlerRegistry_1.HandlerRegistry.registerParam(type, actionName, index, paramType, expression, options);
}
//# sourceMappingURL=Params.js.map