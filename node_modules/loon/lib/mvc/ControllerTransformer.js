"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Express = require("express");
const HandlerTransformer_1 = require("./HandlerTransformer");
const _ = require("lodash");
const RouterLogger_1 = require("../util/RouterLogger");
class ControllerTransformer {
    get controllerMetadata() {
        return this._controllerMetadata;
    }
    constructor(controllerMetadata) {
        this._controllerMetadata = controllerMetadata;
        this._router = Express.Router();
    }
    transform() {
        this._controllerMetadata.handlers.forEach(handlerMetadata => {
            const handlerTransformer = new HandlerTransformer_1.HandlerTransformer(handlerMetadata);
            const handler = handlerTransformer.transform();
            const [beforeFilters, afterFilters] = this.getFiltersForAction(handlerMetadata.actionName);
            const actions = _.concat([], beforeFilters, handler, afterFilters);
            handlerMetadata.httpMethodAndPaths.forEach(httpMethodAndPath => {
                RouterLogger_1.RouterLogger.push([
                    httpMethodAndPath.method,
                    this._controllerMetadata.baseUrl,
                    httpMethodAndPath.path,
                    handlerMetadata.type.name,
                    handlerMetadata.actionName
                ]);
                this._router[httpMethodAndPath.method](httpMethodAndPath.path, actions);
            });
        });
        return this._router;
    }
    getFiltersForAction(actionName) {
        return ['beforeFilters', 'afterFilters'].map(key => {
            const store = [];
            this._controllerMetadata[key].forEach(controllerFilterMetadata => {
                let flag = true;
                // filter have only option, this action don't include inside it
                if (controllerFilterMetadata.only && controllerFilterMetadata.only.indexOf(actionName) === -1) {
                    flag = false;
                }
                // filter have except option, this action include inside it
                if (controllerFilterMetadata.except && controllerFilterMetadata.except.indexOf(actionName) > -1) {
                    flag = false;
                }
                if (flag) {
                    const handlerMetadata = controllerFilterMetadata.filterMetadata.handler;
                    const handlerTransformer = new HandlerTransformer_1.HandlerTransformer(handlerMetadata);
                    store.push(handlerTransformer.transform());
                }
                return store;
            });
            return store;
        });
    }
}
exports.ControllerTransformer = ControllerTransformer;
//# sourceMappingURL=ControllerTransformer.js.map