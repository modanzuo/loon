"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ApplicationRegistry_1 = require("./ApplicationRegistry");
const Express = require("express");
const Fs = require("fs");
const ControllerRegistry_1 = require("../mvc/ControllerRegistry");
const HandlerTransformer_1 = require("../mvc/HandlerTransformer");
const ControllerTransformer_1 = require("../mvc/ControllerTransformer");
const MiddlewareRegistry_1 = require("../mvc/MiddlewareRegistry");
const DependencyRegistry_1 = require("../di/DependencyRegistry");
const InitializerRegistry_1 = require("../initializer/InitializerRegistry");
const RouterLogger_1 = require("../util/RouterLogger");
class ApplicationLoader {
    get server() {
        return this._server;
    }
    get env() {
        return this._env;
    }
    get components() {
        return this._components;
    }
    get routes() {
        return this._routes;
    }
    get rootDir() {
        return this._rootDir;
    }
    get srcDir() {
        return this._srcDir;
    }
    get publicDir() {
        return this._publicDir;
    }
    get logDir() {
        return this._logDir;
    }
    get configDir() {
        return this._configDir;
    }
    get dbDir() {
        return this._dbDir;
    }
    get port() {
        return this._port;
    }
    /**
     * Load user defined settings into ApplicationLoader
     * Initialize settings
     */
    constructor() {
        this._server = Express();
        const settings = ApplicationRegistry_1.ApplicationRegistry.settings;
        this._env = process.env.NODE_ENV || settings.env || 'development';
        this._rootDir = settings.rootDir;
        // Assign user defined folder structure to ApplicationLoader
        // If no such folder, then create it
        ['src', 'public', 'log', 'config', 'db'].map(item => {
            this[`_${item}Dir`] = settings[`${item}Dir`] || `${this._rootDir}/${item}`;
            if (!Fs.existsSync(this[`_${item}Dir`]) && this._env !== 'test') {
                Fs.mkdirSync(this[`_${item}Dir`]);
            }
        });
        this._port = process.env.PORT || settings.port || 9000;
        this._components = settings.components || [];
        this._routes = settings.routes || {};
        DependencyRegistry_1.DependencyRegistry.set(ApplicationLoader, this);
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            '$beforeInit' in this ? yield this.$beforeInit() : null;
            InitializerRegistry_1.InitializerRegistry
                .getInitializers()
                .forEach((initializer) => __awaiter(this, void 0, void 0, function* () {
                const instance = DependencyRegistry_1.DependencyRegistry.get(initializer.type);
                yield instance['init'].apply(instance);
            }));
            '$afterInit' in this ? yield this.$afterInit() : null;
            return this;
        });
    }
    loadComponents() {
        return __awaiter(this, void 0, void 0, function* () {
            require('require-all')({
                dirname: this.srcDir,
                excludeDirs: new RegExp(`^\.(git|svn|node_modules|${this.configDir}|${this.logDir}})$`),
                recursive: true
            });
            return this;
        });
    }
    loadMiddlewares() {
        return __awaiter(this, void 0, void 0, function* () {
            '$beforeLoadMiddlewares' in this ? yield this.$beforeLoadMiddlewares() : null;
            this.server.use((req, res, next) => {
                req.id = require('cuid')();
                next();
            });
            this.server.use(require('body-parser').json());
            this.server.use(require('body-parser').urlencoded({ extended: true }));
            this.server.use(require('cookie-parser')());
            this.server.use(require('method-override')());
            this.server.use(require('serve-static')(this.publicDir));
            MiddlewareRegistry_1.MiddlewareRegistry
                .getMiddlewares({ isErrorMiddleware: false })
                .forEach(middlewareMetadata => {
                const handlerMetadata = middlewareMetadata.handler;
                const transformer = new HandlerTransformer_1.HandlerTransformer(handlerMetadata);
                this._server.use(middlewareMetadata.baseUrl, transformer.transform());
            });
            '$afterLoadMiddlewares' in this ? yield this.$afterLoadMiddlewares() : null;
            return this;
        });
    }
    loadRoutes() {
        return __awaiter(this, void 0, void 0, function* () {
            '$beforeLoadRoutes' in this ? yield this.$beforeLoadRoutes() : null;
            ControllerRegistry_1.ControllerRegistry.controllers.forEach(controllerMetadata => {
                const transformer = new ControllerTransformer_1.ControllerTransformer(controllerMetadata);
                const router = transformer.transform();
                this._server.use(controllerMetadata.baseUrl, router);
            });
            '$afterLoadRoutes' in this ? yield this.$afterLoadRoutes() : null;
            return this;
        });
    }
    loadErrorMiddlewares() {
        return __awaiter(this, void 0, void 0, function* () {
            '$beforeLoadErrorMiddlewares' in this ? yield this.$beforeLoadErrorMiddlewares() : null;
            MiddlewareRegistry_1.MiddlewareRegistry
                .getMiddlewares({ isErrorMiddleware: true })
                .forEach(middlewareMetadata => {
                const handlerMetadata = middlewareMetadata.handler;
                const transformer = new HandlerTransformer_1.HandlerTransformer(handlerMetadata);
                this._server.use(middlewareMetadata.baseUrl, transformer.transform());
            });
            '$afterLoadErrorMiddlewares' in this ? yield this.$afterLoadErrorMiddlewares() : null;
            return this;
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.loadComponents();
                yield this.init();
                yield this.loadMiddlewares();
                yield this.loadRoutes();
                yield this.loadErrorMiddlewares();
            }
            catch (e) {
                throw new Error('failed to run application');
            }
            console.log(RouterLogger_1.RouterLogger.toString());
            this.server.listen(this.port, () => {
                console.log(`Application is listening on port ${this.port}`);
            });
        });
    }
}
exports.ApplicationLoader = ApplicationLoader;
//# sourceMappingURL=ApplicationLoader.js.map